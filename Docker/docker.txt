Docker tutorial
============================
for begginers:
https://docs.docker.com/get-started
https://www.youtube.com/watch?time_continue=35&v=M7ZBF-JJWVU
cheatshet:
https://github.com/wsargent/docker-cheat-sheet

obraz (image) -  The file system and configuration of our application which are used to create containers.
kontener (containers) -  Running instances of Docker images — containers run the actual applications. A container includes an application and all of its dependencies.
warstwy (layers) - A Docker image is built up from a series of layers. Each layer represents an instruction in the image’s Dockerfile. Each layer except the last one is read-only.
Dockerfile - A text file that contains all the commands, in order, needed to build a given image. The Dockerfile reference page lists the various commands and format details for Dockerfiles.
Volumes - A special Docker container layer that allows data to persist and be shared separately from the container itself.
		  Think of volumes as a way to abstract and manager your persistent data separately from the application itself.


skróty klawiszowe
---------------------
Ctrl+P i Ctrl+Q - wylazi z kontenera nie wylaczajac go ??


Info o serwerze dockera
-----------------------
docker version - wyswietla wersje serwera, klienta i modułów
docker info - info o serwerze, liczbie kontenerow, itp.


Uruchamianie i dzialanie na kontenerach
---------------------------------------
docker run 
  -it <obraz> <komenda> - tworzy kontener z obrazu, odpala komende o podlacza sie do interfejsu tty
      (docker run=docker create + docker start)
  --name jakas_nazwa_kontenera )nada losową nazwę jeśli nie podamy)
  -p <port_hosta>:<port_kontenera>  mapuje port kontera na podany port hosta	
  -P mapuje wszystkie otwarte  porty na porty hosta hosta. Docker przypisuje każdy  port na losowyport hosta
  -i tryb interaktywny - Keep STDIN open even if not attached
	-t dołączenie terminalu do jego danych wyjściowych i wejściowych (Allocate a pseudo-TTY)
	-v /katalog/na_serwerze:/katalog/w_kontenerze - montuje w kontenerze system plikow pochodzacy z hosta
  -rm - usuwa kontener po zakonczeniu działania

  --hostname - ustawia hostname kontenera
  --mac-address - ustawia mac address kontenera
  --restart= kontener zostanie zrestartowany jeśli zakończy działanie. docker sprobuje zrestartować 3krotnie kontener zanim się podda
            no - nię będzie restartowany (domyślne)
            always - zawsze (bez względu na kod wyjscia)
            on-failre - kiedy kod wyjscia bedzie różny od zera

Tworzenie, startowanie, pauzowanie, itp.
docker create - Tworzy nowy kontener na podstawie obrazu ale go nie startuje
docker start <nazwa/id-kontenera> - startuje kontener
docker stop <nazwa/id-kontenera> - zatrzymuje kontener (wysyla SIGTERM)
       -t <sekundy> czeka ilość sekund i ubija kontener (wysyla SIGKILL)
       Kontener mozemy ponownie uruchomic, zawartosc pamieci bedzie utracona, ale zawartosc systemu plikow i metadane (zmienne srodowiskowe,
       powiazania portow itp.) są zapisywane i po zrestartowaniu kontenera pozostają niezmienione.     
docker kill <nazwa/id-kontenera> - zatrzymuje kontener (wysyla SIGKILL do kontenera, a dokładniej do procesu głównego wewnątrz kontenera)
		--signal okresla jaki konkretnie sygnal wyslac do procesu glownego kontenera (domyslnie SIGKILL)
docker pause <nazwa/id-kontenera> - zamraza kontener, zasadniczo wstrzymuje przydzielanie procesora procesowi do czasu jego "odmrożenia", 
      co powoduje, że proces nie moze nic zrobic i dzieki temu mozemy zachowac pelny stan kontenera wlacznie z pamiecia
docker unpouse <nazwa/id-kontenera> - "odmraża" zapauzowany kontener
docker rm  <nazwa/id-kontenera> - usuwa kontener

Interakacja z kontenerem:
docker exec <nazwa/id-kontenera> - we can send a command in to the container to run by using the exec command
docker exec -it <id_kontenera> <jakas-komenda> - podlacza sie do uruchomionego kontenera i odpala basha
docker attach <nazwa/id-konterenara> - "podłaczenie sie" do działającego kontenera
docker diff <id kontenera> Pokazuje różnice w plikach lub folderach między obrazem a kontenerem od kiedy zosał utworzony
docker commit - zostanie utworzony nowy obraz zawierający wszystkie dokonane zmiany i gotowy do późniejszego uruchomienia

Info o dockerze i kontenerach:
docker ps	- listuje działające kontenery
docker ps -a - listuje wszystkie kontenery (działające, zpauzowane, niedzialajace, itd.)
docker inspect <id_kontenera> - wyswietla info o kontenerze


Debugowanie kontenerów
-----------------------
docker top <id_kontnera> - wyswietla uruchomione procesy na kontenrze, cos jak komenda "ps" (UID, PID, STIME, TTY, CMD)
docker stats <id_kontnera>  - wyswieta statyskyki kontenera live, cos jak komenda "top" (CPU, MEM, NET I/O, BLOCK I/O, PIDS)

Na hoscie:
(procesy dockera mozna zdebugowac tak samo jak kazdy inny proces w systemie) 
//zeby łatwiej było znalesc procesy mozna odpalac kontenery z nadana numeryczna nazwą usera, np. -u 5000
ps axlfww - pokazuje drzewo polecen (kontenerow mozna szukac po containerd)
pstree `pidof dockerd` - drzewo procesow dockera na hoscie
lsof -p <pid_procesu>
strace -p <pid_procesu> //sciezki do plikow pokazuje relatywnie do kontenera

Sieć:
docker network ls
docker network inspect <NETWORK>
docker port <id/nazwa_kontenera> - pokazuje mapowanie portów danego kontenera
netstat -anp 

Kontner:
docker diff <kontener> - Wyświetl listę zmienionych plików i katalogów w systemie plików kontenera od momentu utworzenia kontenera.
                         Przydatne, zeby sprawdzić czy jakieś logi albo inne niepotrzebne pliki tworzą się na filesystemie kontenera.
A - file or directory was added
D - file or directory was deleted
C - file or directory was changed 
np. docker diff 564nj4345h4 
  C /var/log/redis
  A /var/log/redis/redis.log
  C /var/run
  A /var/run/cron.reboot
  A /var/run/crond.pid
  C /var/lib/logrotate.status
  C /var/lib/redis
  A /var/lib/redis/dump.rdb
  C /var/spool/cron
  A /var/spool/cron/root

/var/lib/docker/containers/<id_kontenera> - this directory contains some files that are bind-mounted directly into your container, like hosts, resolv.conf, and hostname.

//tu skonczylem, Chapter 9

Kontrolowanie procesow w kontenerze:
docker run --init - odpala w kontenerze system init (tiny init), ktory dostaje PID 1 i zarządza procesami.
You can use the --init flag to indicate that an init process should be used as the PID 1 in the container. 
Specifying an init process ensures the usual responsibilities of an init system, such as reaping zombie processes, 
are performed inside the created container


Ograniczanie zasobów
---------------------
https://docs.docker.com/config/containers/resource_constraints/

Przykładowe ustawienia:
docker run
  -m, --memory="" - limit pamięci
  --memory-reservation="" - memory soft limit
  --cpus=0.000 - ilosc cpu
  --device-read-iops=""
  --device-write-iops=""
  --oom-score-adj=0 - OOM killer waga
  

Ograniczenia zasobów przez ulimit:
docker daemon --default-ulimit <wartosc ulimit> - domyslne dla wszystkich kontenerow
docker run -d --ulimit <wartosc ulimit> <kontener> - dla konkretnego kontenera
ulimit -a - wyswietla dostepne typy limitów ulimit


Przesyłanie plików
--------------------------
kopiowanie jednego pliku na kontener:
docker cp mycontainer:/foo.txt foo.txt

kopiowanie wielu plikow na kontener:
docker cp src/. mycontainer:/target
docker cp mycontainer:/src/. target


Działanie na obrazach
-----------------------------
docker images - listuje lokalną lista obrazow
	-q pokazuje tylko id obrazu
docker image pull <nazwa_obrazu> - sciaga obraz z dockera hub albo innego rejestru obrazów
docker image ls - lista obrazow w systemie
docker image inspect <nazwa/id obrazu> - info o obrazie // dane sa w formacie json
docker image inspect --format "{{ json .RootFS.Layers }}"  <nazwa/id obrazu> - to co wyzej ale z filtrowanym info
docker rmi (image rm) <nazwa/id-obrazu> - usuwa obraz dockera
docker image rmi $(docker ps -q -) - usuwa wszystkie obraz z serwera
docker image tag
docker image history <id kontenera> - pokazuje historię w jaki sposób budowany był konkretny obraz


Udostępnianie i mapowanie portów
---------------------------------
EXPOSE - Sygnalizuje, że na określonym porcie dostępna jest usługa. Instrukcja używana jest w pliku Dockerfile,
		 który zapewnia, że udostępnione porty są otwarte dla innych kontenerów.
--expose - Są to równorzędne polecenia, choć opcja --expose pozwala również podać zakres portów jakoargument (na przykład --expose=1000-2000 )
-p - Opcja określa regułę mapowania portów, mapując port kontenera na port komputera hosta. W ten sposób port jest dostępny poza obrębem Dockera.
	 Jeśli nie określono żadnego portu hosta, Docker automatycznie go przydzieli.
		np. docker run -p<port_hosta>:<port_kontenera> <identyfikator lub nazwa obrazu>
-P - Opcja mapuje dynamicznie (losowo	) przydzielony port komputera hosta na wszystkie porty udostępnione za pomocą instrukcji EXPOSE lub opcji -expose.
--expose roznica -p - W przprzypadku udostępniania portu za pomocą instrukcji EXPOSE usługa w kontenerze jest niedostęp-
	na poza obrębem Dockera, lecz jest dostępna z poziomu innych kontenerów Dockera. Opcja -p zawiera w sobie --expose.


Wolumeny dockera
-----------------
docker run -it -v /Users/jarek/testDir/:/data ubuntu
docker run -it -v /data2 ubuntu
docker run --name docker-nginx -p 80:80 -d --volumes-from myWebsiteData nginx
docker volume create
VOLUME w Dockerfile
info o volumenie:
	docker run -it -v /data2 ubuntu
docker run -it -v /data2 ubuntuw - podłaczenie volumenu o nazwie data do katalogu w kontenerze /data
docker rm -v <nazwa_kontenera> - usuwa wolumen bez pytania, nawet jesli jakies kontenery uzywaja tego wolumenu
docker volume rm - usuwa wolumen ale tylko wtedy kiedy żaden kontener go nie uzuwa
docker volume rm $(docker volume ls -qf dangling=true) - usuwa wszystkie wolumeny, do których nie odwołuje się żaden kontener
--driver; -d - sterownik wolumenu,  (domyslnie "local")


Konfigurowanie sieci w dockerze
----------------------------------
http://training.play-with-docker.com/docker-networking-hol/

docker network ls	- command to view existing container networks on the current Docker host
docker network inspect <nazwa/id sieci> - info o konfiguracji sieci
docker info | grep Network - list network driver plugins

Bridge Networking:
Every clean installation of Docker comes with a pre-built network called bridge.
docker run -p 8080:80 nginx - odpala kontener i mapuje port 80(docker) na 8080(serwer)
    -p 8080:80  i natuje port 8080 serwera dockera na 80 kontenera (The port mapping is actually port address translation (PAT)).
Po odpaleniu kontenera domyslnie podlacza sie on do interfejsu bridge, brctl show - pojawi sie w kolumnie interfaces pod docker0


Docker logs
-----------------
Istnieje kilka sterowników które pozwalają na przesyłanie logów do konkretnych frameworków, np.
syslog, awslogs, splunk, journald, json (domyslny)
docker logs <id_kontenera> - wyswietla logi kontenera (działa tylko przy domyslnym sterowniku logowaniu -plikujson)
            -f podglad live


Debugowanie kontenera
--------------------------
docker top <id_kontnera> - wyswietla uruchomione procesy na kontenrze, cos jak komenda "ps" (UID, PID, STIME, TTY, CMD)
docker stats <id_kontnera>  - wyswieta statyskyki kontenera live, cos jak komenda "top" (CPU, MEM, NET I/O, BLOCK I/O, PIDS)
Procesami z kontenerów mozna zadządzac na hoscie tak samo jak zwyklymi procesy, dotyczy to m.in. 
debugowania,np.
  ps axlfww
  pstree `pidof dockerd`
  strace -p <pid>
  lsof -p <pid>
przesyłania sygnałów SIGTERM,SIGKILL
//tu skonczylem, str.129


Monitoring dockera
------------------
API dockera podaje więcej informacjeprzez węzeł 'stats', przyklad mozna wyciagnac curlem z adresu kontenera,
np. curl --unix-socket /var/run/docker.sock http://v1/containers/<id_kontenera>/stats | head -1 | python -m json.tool
    curl http://localhost:<docker_api_port>/v1/containers/<id_kontenera>/stats/ | head -1 | python -m json.tool 
    (you need to expose the Docker API on a TCP port) 
docker stats - info o wykorzystaniu zasobow przez kontenery
docker events - podłącza się pod stream wyswietlajacy zmiany statusu kontenerów, obrazów, wolumenow, sieci, itp.
    np. start/stop kontenera, pull nowego obrazu, nowy tag, zainstalowanie pluginu dockera, itp.
    wyjscie można filtrować po czasie, statusie, nazwie, id

Health Checks:
Docker ma swoj mechanizm healt checkow ktory mozna wrzucic do obrazu lub odpalic z lini komend
HEALTHCHECK <options> CMD <command>
  --interval=DURATION (default 30s)
  --timeout=DURATION (default 30s)
  --retries=N (default 3)
np. HEALTHCHECK --interval=5s --timeout=4s CMD curl --fail http://localhost:7041/pools || exit 1
    docker run -d --health-cmd "curl --fail http://localhost:9095/cos || exit 1" --health-interval=5s --timeout=3s jakis_obraz
Exit status moze być:
  0 – container is healthy
  1 – container is not healthy
Kontener moze byc w trzech stanach:
  starting – status początkowy, kiedy kontener startuje
  healthy –  kiedy komenda zwraca 0
  unhealthy - jesli pojedyncze uruchomienie trwa dłużej niż określony timeout, jest to uważane unhealthy. 
              jesli health check sfailuje to, jest ponowiony wg. ustawienia w --retries i dopiero jesli sie nie powiedzie N razy, zostanie oznaczony jako unhealthy
  Ostatnie 5 health checks konkretnego kontenera mozna odczytac przez docker inspect <id/nazwa_kontenera>

Sprawdzenie statusu:
docker inspect --format='{{json .State.Health}}' <id/nazwa_kontenera>
docker ps
... IMAGE                ... STATUS                         PORTS     ...
... mongo-with-check:3.2 ... Up 1 second (health: starting) 27017/tcp ...

Docker security
------------------------
http://training.play-with-docker.com/security-seccomp/
http://training.play-with-docker.com/security-capabilities/
https://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/

jak wpakowac sie na hosta z poziomu dockera: docker run -ti --privileged -v /:/host fedora chroot /host
bindujemy / hosta na /host i chrootujemy z poziomu dockera na /host z uprawnieniami roota :)


Docker logowanie
------------------------
docker login --username <dockerId> --password <hasło>


Docker Swarm Mode
--------------------
http://training.play-with-docker.com/ops-stage2/
http://training.play-with-docker.com/ops-s1-swarm-intro/
http://training.play-with-docker.com/orchestration-hol/

Swarm: Stos, Serwisy, Zadania
stos (stack) - group of interrelated services and dependencies. Orchestrated as a unit. Production applications are one stack, and sometimes more.
				w skrocie grupa serwisów powiazanych ze soba, skladających się na całość stosu.
serwis (service) - a stack component, including a container image, numbers of repolicas (tasks), ports, and update policy
				jeden lub wiecej takich samych kontenerów tworzących jedna aplikację?
zadanie (task) - unit of services and scheduling in Docker. One container instance per task


docker swarm init --advertise-addr $(hostname -i) - Initializing Docker Swarm Manager
docker swarm join --token <hash z outputu docker dwarm init> <ip:port z outputu docker swarm init> - dodanie workera do docker swarm
docker swarm ls - wyswietla wszystkie nody w swarmie (managery i workery)

Tworzenie "stosu" serwisow - czyli wdrazanie/tworzenie/konfigurowanie/uruchamianie grup serwisow w swarmie:
docker-stack.yml - plik yaml z konfiguracja swarma. Definiuje nasz cały stos (stack): architekturę usług, liczbę instancji, sposób połączenia wszystkiego,
					obsługę aktualizacji dla każdej usługi. Jest to kod źródłowy do naszego projektu aplikacji.
					Przykładowy plik zawiera m.in. wpisy
						services - zawiera poszczególne składniki dla aplikacji, wewnatrz
									*image: obraz dockera użyty do budowania serwisu
									*ports: port na ktorym ma dzialac serwis
									*networks: wiadomix
									*deploy: konfiguracja rozmieszczania, liczby kontenerow itp.
										replicas:
										...


docker stack deploy --compose-file=docker-stack.yml jakis_stos
docker stack ls	- wyswietla  "zdelpoyowane" stosy i liczbe serwisów (aplikacji) nalezących do stosu
docker stack services <jakis_stos> - wyswietla info o serwisach(aplikacjach) w stocku (Id obrazu, nazwa, porty, liczba replik)
docker service ps <jakis_serwis_ze_stosu> - listuje zadania (repliki?) danego serwisu, np. na jakim nodzie dziala
docker service scale <jakis_serwis_ze_stosu> =5 - dorzucenie taskow do serwisu (skalowanie, zmiana liczby konenerów(taskow) w serwisie dla np. zwiekszenia wydajnosci)


Kubernetes // wydzielic do osobnego pliku
---------------------
https://kubernetes.io/docs/tutorials/kubernetes-basics/
http://cockpit-project.org/
cockpit-kubernetes.x86_64 : Cockpit user interface for Kubernetes cluster



budowanie obrazów
-----------------------------
Budowanie z kontenera na podstawie innego obrazu:
1.Odpalamy jakis kontener z gotowego obrazu, podlaczamy sie do konsoli i cos zmieniamy, np. instalujemy jakis nowy soft
	docker container run -ti ubuntu bash
	apt-get update
	apt-get install -y figlet
2.Sprawdzamy roznice miedzy roznice jakie wprowadzilismy
	docker container diff <id kontenera>
3.Tworzymy nowy obraz z kontenera ktory utworzylismy
	docker container commit <id kontenera>
4.dobrze jest otagowac nowy obraz
	docker image tag <IMAGE_ID> jakis_tag
    docker image ls

Budowanie obrazu uzywajac pliku Dockerfile
1. Tworzymy plik Dockerfile >>
	FROM alpine 						// okresla bazowy obraz ktory ma byc uzyty do budowy
	RUN apk update && apk add nodejs	// uruchamia polecenia (w tym przypadku pak update i apk add)
	COPY . /app							// kopiuje pliki z katalogu roboczego do kontenera
	WORKDIR /app						// definiujemy katalog roboczy dla kontenera po starcie
	CMD ["node","index.js"]				// podajemy komende jaka ma byc uruchomiona po starcie kontenera

2. budujemy obraz w katalogu z plikiem Docker
	docker build -t jakas_nazwa:versja .
			np. docker image build -t hello:v0.1 .

Instrukcje pliku Dockerfile:
FROM <obraz> albo <obraz>:<znacznik> albo <obraz>@<skrócony_opis>
MAINTAINER nazwa_twórcy
ADD <ścieżka lub adres URL miejsca źródłowego> <ścieżka miejsca docelowego> - kopiuje pliki z miejsca źródłowego na hoście do własnego systemu plików obrazu Dockera
	<katalog docelowy> identyfikuje ścieżkę bezwzględną lub ścieżkę względną w odniesieniu do katalogu określonego przez instrukcję WORKDIR
	- jesli kopiujemy archiwum, to ADD automatem je rozpakuje
	- mozna pobrac pliki z sieci
COPY <ścieżka miejsca źródłowego> <ścieżka miejsca docelowego> - skopiuje nowe pliki lub katalogi ze ścieżki i doda je do systemu plików kontenera reprezentowanego przez ścieżkę
	- preferowana nad ADD (jeśli nie trzeba korzystać z dodatkowych funkcji ktore posiada ADD)
CMD - moze byc tylko jedna uinstrukcja w Dockerfile, jesli jest wiecej, uruchamia sie tylko ostatnia.

