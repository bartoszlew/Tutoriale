przygotowanie srodowiska
---------------------------
ChefDK - narzedzia i soft chefa (knife, chef-client, Berkshelf, itp.)

tworzenie cookbookow od podstaw
---------------------------------
chef generate cookbook jakas_nazwa - tworzynowy drzewo folderów cookbooka z podstawowa zawartoscia
tworzenie plikow:
	chef generate -h
	np.
	chef generate template [sciezka do cookbooka] nazwa.pliku
  	np. chef generate cookbooks cookbooks/learn_chef_httpd index.html
	chef generate attribute ./ default

sciagniecie gotowego przepisu ze chef.supermarket:
knife cookbook site download [nazwa-cookbooka]

najprosciej jest kopiowac gotowe cookbooki i je modyfikowac



podstawy - attributes, recipe, template, files
-------------------------------------------------

attributes (atrybuty) - wartosci atrybutow. czyli ustawienie zmiennych = klucz-wartosc
	default['sms']['port'] = 8456
		default - moze byc: default, normal, override -> priorytety atrybutu: https://docs.chef.io/roles.html
		['sms'] - jakas grupa, nazwa moze byc jakakolwiek, najczesciej ustawiaomy nazwe cookbooka zeby bylo wiadomo o co chodzi, to jest tylko "grupa" zmiennych
		['port'] - nazwa zmiennej

recipe (przepisy)- w recipe jest glowna konfiguracja, odwolujemy sie tam do plikow, atrybutow, templatow
	odwolanie:
	:config_var => node['configs']['config_var']
		- config nazwa atrybutu
		node[] wartosc atrybutu

template - uzycie atrybutu. tak jak pliki ale nie sa statyczne. mozemy odwolac sie/wstawic zmienne ktore sa zdefiniowane w attributes
	@nazwa_zmiennej
	atrybut mozemy bezposrednio  wstawic do recipe bez odwolywania sie do zmiennej:
	zamiast :config_var => node['configs']['config_var'] , wstawiamy default['sms']['port']

files - statyczne pliki które beda wrzucane na noda



attributes
------------------------
zmiana atrybutow w:

-cookbookach - dla cookbooka
	-attributes
	-recipes
	.. ?
-rolach - dla grupy ktora ma przypiata role
-nodach - dla pojedynczego noda

osobno dla jednego noda - wrzucamy w bezposrednio w node w sekcji atrybutow
"zasobyp: {
	"action": "upgrade"
	}


cookbooks
-------------------------
iteracja:
--
node['nginx_selinux']['ports'].each do |seport|
    execute 'selinux add port' do
        command "/sbin/semanage port -a -t http_port_t -p tcp #{seport}"
        not_if "/usr/sbin/semanage port -l | grep -E '^http_port_t.*tcp.*[^0-9]#{seport}($|[^0-9].*$)'>/dev/null"
    end
end


if--else:
--
if node[:fqdn] != 'host.domena.pl'
        selinux_policy_boolean 'nis_enabled' do
                value false
        end
end



wrapper cookbooks
-----------------------
https://blog.chef.io/2017/02/14/writing-wrapper-cookbooks/
https://realityforge.org/code/2012/11/19/role-cookbooks-and-wrapper-cookbooks.html

For every cookbook and/or recipe we wanted to customize we created a separate 'wrapper' recipe
that set the required attributes and then included the recipe from the original cookbook.

1. dodanie zaleznosci do 'metadata.rb'
	np.	depends 'public_cookbook'
			depends 'public_cookbook', '= 1.4.5' //opcjonalnie przypiecie wersji
2. include_recipe w recipe/default.rb
	np. include_recipe	'public_cookbook::default.rb'
3. modyfikowanie/ustawienie oryginalnego cookbooka ustawiamy w attributes/default.rb wrapera albo w recipe/default.rb przed 'include_recipe'
	np. default['iis']['pubroot']    = '/mnt/publocal'
4. role cookbook
5. edit_resource - pozwala namodyfikowanie zasobow includowanego cookbooka we wraperze
	np.
	include_recipe 'bad_cookbook::default'
		edit_resource(:template, 'C:\\important\\template\\path.ini') do
  		source 'my_beautiful_template.erb'
  		cookbook 'my_awesome_wrapper'
		end


boostrap noda (dodanie noda do chefa)
-------------------------------------
https://learn.chef.io/modules/manage-a-node-chef-server/rhel/bring-your-own-system/bootstrap-your-node#/

- sprawdzic polaczenie ssh do noda (najlepiej ustawic logowanie po kluczu)

knife bootstrap ADDRESS --ssh-user USER --sudo --ssh-identity-file IDENTITY_FILE --node-name node1-centos --run-list 'recipe[learn_chef_httpd]'
	--node-name - ustawia nazwe noda w  Chef serwerze, nie musi to byc nazwa hostnama
	np. knife bootstrap 34.238.115.178 --ssh-user centos --sudo --identity-file ~/.ssh/private_key --node-name node1-centos --run-list 'recipe[learn_chef_httpd]'


sprawdzenie:
	knife node list
	knife node show node1-centos

update cookbooka:
	np. knife ssh 'name:node1-centos' 'sudo chef-client' --ssh-user USER --identity-file IDENTITY_FILE --attribute ipaddress



pobieranie cookbookow z chef supermarket + Berkshelf
------------------------------------------------------
knife supermarket - pobiera ale bez zaleznosci
Berkshelf - tool that helps you resolve cookbook dependencies. Can retrieve the cookbooks that
		your cookbook depends on and can upload your cookbooks to your Chef server.

Berksfile  //uzywac z chef exec - uzywa wtedy chefowych libow ruby
chef exec berks install - sciaga z supermarketu zaleznosci cookbokow zdefiniowanych w Berksfile
chef exec berks show [cookbook] pokazuje sciezke na dysku do sciagnietego przez berks cookbooka
chef exec berks upload - wrzuca cookbooka i zaleznosci do chef servera
$HOME/.berkshelf/cookbooks/



Chef-client
-----------------
chef-client -o "recipe[jakis_cookbook@0.1.2]"  - odpalanie innej wersji cookbooka na nodzie
chef-client -z -c /tmp/kitchen/client.rb
	-z - odpalanie lokalnie
	-c - sciezka do konfigu
knife ssh 'name:node1-centos' 'sudo chef-client' --ssh-user centos --ssh-identity-file ~/.ssh/private_key



============================ Test Kitchen i testowanie cookbookow ============================

https://learn.chef.io/modules/local-development/windows/virtualbox/apply-a-cookbook#/
https://docs.chef.io/config_yml_kitchen.html
https://www.tutorialspoint.com/chef/chef_test_kitchen_setup.htm

lokalne odpalanie przepisow
---------------
chef-client --local-mode jakis_przepis.rb
chef-client --local-mode --runlist 'recipe[jakis_przepis]'


Test Kitchen
---------------
Test Kitchen - w skrocie:
 	1. Buduje chwilowe srodowisko testowe tworzac wirtualke (za pomoca 'drivera' np. vagranta + hyperwizora, np. virtualboxa
	   lub chmury (np. aws ec2,azure) albo kontenerów,
	2. Kopiuje na wirtualkę testowane cookbooki (za pomocą 'provisionera', np. ChefZero, Ansible )
	3. Uruchamia i przeprowadza automatyczne testy  (za pomocą np. Inspec, ChefSpec).
//domyślnie: Vagrant + Virtualbox + ChefZero + InSpec
Test Kitchen umożliwia określenie szczegółów dotyczących maszyny wirtualnej, w tym jej systemu operacyjnego, dostępnej pamięci, nazwy hosta,
i ustawień sieciowych, oraz jak uruchomić Chefa - w tym, które przepisy i które testy należy uruchomić.
Np. dla Vagranta: Test Kitchen builds the Vagrantfile for you and is the interface you use to create, destroy, and run Chef on your instances.

.kitchen.yml - definiuje, co jest potrzebne do uruchomienia Test Kitchen, w tym, z którego dostawcy wirtualizacji korzystać,
		jak uruchomić Chef i na jakich platformach uruchomić swój kod.
		provisioner:
  		cookbook_path: whatever/path/to/cookbooks - sciezka do lokalnych cookbookow

kitchen - polecenie korzysta z konfiguracji w  ".kitchen.yml" (odpalamy w katalogu glownym konkretnego cookbooka)
kitchen list - pokazuje co jest w "kuchni"
kitchen create - tworzy testowa instancje
kitchen converge - instaluje chefa, wrzuca/aktualizuje i odpala testowane cookbooki do virtualnej maszyny
kitcheb verify - odpala testy
kitchen login - loguje sie po ssh do testowej instancji
kitchen exec - odpala polecenie na maszynie testowej, np.
	kitchen exec -c 'curl localhost'
kitchen destroy - usuwa testowe wirtualki
kitchen test - equvalent to destroy, create, converge, verify, and destroy your instance all in one step.
	uzywane gdy chcemy przeprowadzic test na "czystej" instancji

info:
Bento - repo z gotowymi do uzycia boxami Vagranta (predefiniowane dla chefa?)


Automated testing
-----------------
"Integration" test - weryfikuje czy system jest skonfigurowany poprawnie (np.Inspec).
"Linting" - analiza kodu, wyszukuje błędy programowania, błędy stylistyczne i składnie (np.CookStyle, FoodCritic).
"Unit" test - weryfikuje czy kod jest napisany poprawnie, czy kod robi to co ma robic. Skupia się na pojedynczych komponentach kodu (np.ChefSpec).



1) InSpec (integration test) (test/integration/default)
---
https://www.inspec.io/docs/reference/resources/
https://learn.chef.io/modules/tdd-with-inspec#/

InSpec sprawdza czy chef zbudowal i skonfigurował system tak jak chcielismy, np. czy serwis jest zainstalowany i uruchomionm
czy dziala na odpowiednim porcie. Do sprawdzenia potrzebne jest całe środowisko testowe (wirtualka).

Zasadadniczo piszemy jeden test per przepis.
InSpec test has two main components: the subject to examine and the subject's expected state.

InSpec wymaga srodowiska testowego wiec najlepiej wykonywac test na koncu, po ChefSpec, CookStyle i FoodCritic.

2) ChefSpec (unit test) (spec/unit/[recipe/resources?/..?]/nazwa-przepisu_spec.rb) - plik musi zawierać w nazwie "_spec.rb"
---
https://learn.chef.io/modules/unit-test-with-chefspec/linux/create-a-multiplatform-cookbook#/
https://docs.chef.io/chefspec.html
https://github.com/chefspec/chefspec
https://learn.chef.io/modules/best-practices-for-testing/test-driven-cookbook-development#/ --> wszystkie filmy w module

ChefSpec jest rodzajem unit testu, sprawdza kod, wiec nie potrzebuje uruchomionego srodowiska testowego.
Wykonuje testy weryfikujące poprawność działania pojedynczych elementów (jednostek) programu.

Z założemnioa piszemy jeden test per przepis.
default_spec.rb mapuje się do domyślnego recipe -> default.rb
czyli: spec/unit/recipes/default_spec.rb

chef exec rspec --color spec/unit/recipes/default_spec.rb - uruchamia testy zdefiniowane w pliku default_spec.rb
chef exec rspec --color spec/unit/recipes/*.rb - mozna odpalac testy na kilku plikach



3) Cookstyle and Foodcritic (linting)

---
a) CookStyle (działa na podstawie RuboCop)
https://learn.chef.io/modules/verify-code-style/linux/make-your-code-easier-to-read-and-maintain#/

cookstyle - polecenie prawdza składnie kodu ruby, odpalany bez argumentow leci po wszystkich plikach z katalogu bieżącego i podkatalogów
cookstyle -a -> automatycznie poprawia znalezione błędy

styl składni można dostoswac w pliku .rubocop.yml (dziala w katalogu bioeżącym i podkatalogach)

b) FoodCritic - poprawia styl i logikę cookbookow. Poprawia jakość kodu. Upraszcza kod jak narobiłeś baboli.
https://learn.chef.io/modules/verify-code-style/linux/identify-better-usage-patterns#/
https://learn.chef.io/modules/verify-code-style/linux/make-your-code-easier-to-read-and-maintain#/

foodcritic [katalog/plik]- polecenie poprawia styl i logikę cookbookow. Poprawia jakość kodu. Upraszcza kod jak narobiłeś baboli.



Przygotowanie cookbookow do działania z nowszą wersją Chefa.
--------------------------------------------------------------
Trzeba zaktualozowac cookbooki aby były zgodne z nowszą wersją serwera:

Here are some things you can do to keep your cookbooks up to date.
	      Remove files you no longer need.
	      Ensure Foodcritic and Cookstyle tests pass.
	      Use Test Kitchen to verify your cookbook succeeds locally.
	      Create passing unit and integration tests.
	      Add appropriate metadata and documentation.
				Repeat all test at the end.


----
https://docs.chef.io/chef_solo.html

chef solo???

rpm -qa --queryformat  "%{VERSION}" jakas_paczka' -> wyciagnieczie zmiennej paczki
chef-client -z -r "cookbook::test1" -l info testowanie cookbooka lokalnie  (test1 - nazwa przepisu z /recipe)
	do przepisu trzeba wpakowac Chef::Log::info("#{jakas zmienna}") zeby wywalilo wartosc zmiennej



============================ Knife ==============================
https://docs.chef.io/knife_search.html

knife status - sprawdza kiedy ostatnio odpalil sie chef-client na nodach
knife node show [node] - SPRAWDZENIE co ma przypisany host
knife node show [node] -Fj -  SPRAWDZENIE co ma przypisany host
knife cookbook list - listuje aktualne cookbooki na serverze chefa z numerem wersji
knife search node "roles:$ROLE_NAME" -i - listuje wszystkie nody ktore maja przypisana konkretna role
knife search node "chef_environment:nazwa_env" -i - listuje wszystkie nody ktore maja przypisany nazwa_env

knife cookbook upload [jakis_cookbook] - upload cookbooka do servera chefa (jesli nie jest automatycznie wysylany)
knife upload environments/jakies_srodowisko.json - ulpad srodowiska

Sprawdzenie czy node i client jest w cefie
	knife node status <nazwa hosta>
	knife client show <nazwa hosta>
Wywalenie noda z chefa:
	knife node delete <nazwa hosta>
	knife client delete <nazwa hosta>

sprawdzanie atrybutow na serverze chefa (czy aktualne)
-------------------------------------------
knife environment show [nazwa_env]

update atrybutow( env/recipe/itp. ) w chefie
no. env jesli na serewrze jest inna wersja niz w gicie
	knife environment from file environments/jakies_srodowisko.json



=====================Chef Vault i Data bag=====================


Data bag
------------------------
plain text:
knife data bag -z create [nazwa_cookbooka] [nazwa_data-buga] - tworzenie data baga
  -z -> plik tworzony lokalnie (nie na serwerze)

encrypted:
//potrzebny jest odpowiedni wpis (sciezka do klucza wspoldzielonego) w .chef/knife.rb
//klucz jest kopiowany z serwera chefa do lokalnego katalogu .chef ?
knife[:secret] = #{current_dir}/plik_klucza
knife data bag -z create --encrypt [nazwa_cookbooka] [nazwa_data-baga] - tworzenie zaszyfrowanego data baga
knife data bag -z show [nazwa_cookbooka] [nazwa_data-buga]  - podglad zaszyfrowanego data baga
knife data bag -z edit - edycja data baga



Tworzenie nowegp vaulta w chefie i wrzucanie do gita
------------------------------------------------------
https://blog.chef.io/2016/01/21/chef-vault-what-is-it-and-what-can-it-do-for-you/

1.tworzymy nowy item w vaulcie w chefie
knife vault list - listuje pudelka z kluczami
knife vault create nazwa-vaulta nazwa_itemu {"klucz":"wartosc"}
	np. knife vault create nh-vault rsoperations {"dbpass":"haslo_plain_tekstem"} // chef zaszyfruje haslo
knife vault show nazwa_vaulta nazwa_itemu - wyswietla co jest w vaulcie // (rozszyfrowane dlatego haslo jest w plain tekscie)

2. tworzymy data baga na gicie (zaszyfrowany vault)
skryptem chef/chef-repo/scripts/vault-dump.sh albo recznie:
- stworzyc katalog w chef/chef-repo/vaults/waw/nazwa_vaulta/
- cd chef/chef-repo/vaults/waw/nazwa_vaulta/
- zaimportowac itema/vaulta z chefa
	knife data bag show nazwa_vaulta nazwa_itemy -Fj  > nazwa_itemu.json --> importuje vaulta z chefa do jsona i zrzuca do pliku
		np. knife data bag show nh-vault rsoperations -Fj > vaults/waw/nh-vault/rsoperations.json
- zaimportowac klucze userów?? dla vaulta
	to samo co wyzej tylko z przyrostkiem "_keys"
		np.knife data bag show radius-server rsoperations_keys -Fj > rsoperations_keys.json -> importuje klucze userow ???
- wyswietlenie zawartosci data baga
	knife data bag show nh-vault nazwa_itemu - to co w knife valut show, tylko w postaci zaszyfrowanej
- wrzucic wygenerowane jsony do gita!

3. przypisanie vaulta do userow/roli/noda
- sprawdzanie jaka role maa przypisany cert:
	knife vault show ssl_certs costam -p all -Fj
- aktualizuje/dodaje certa do roli:
	knife vault update ssl_certs costam -S "role:jakas_rola"
- to samo, tylko ze do kilku roli:
	knife vault update ssl_certs costam -S "role:jakas_rola or role:jakas_rola"


Cookbook (data bag + vault)
----------------------------
	metadata.rb:
		depends ‘chef-vault’
	recipe.rb:
		require 'chef-vault'
		jakas_zmienna = ChefVault::Item.load("nazwa_vaulta", "nazwa_klucza")
		variables :jakas_nazwa_zmiennej=> jakas_zmienna["nazwa_klucza"]  // przypisujemy jakas_nazwa_zmiennej wartosc klucza
	zmienna mozemy wywolac gdzies cookbooku przez: <%= "#{@nazwa_klucza}" %>

	np.
		secret = ChefVault::Item.load("costa", "costam")
		HMAC_SIGN_KEY=<%= "#{@HMAC_SIGN_KEY}" %>

	template '/etc/sssd/sssd.conf' do
	  source 'sssd.conf.erb'
	  owner 'root'
	  group 'root'
	  mode '0600'
	  variables :authtoken => item["sssd_authtoken"]
	  sensitive true  //dodawac do recipe, wtedy chef-client nie bedzie wyswietlal hasla w logach!


===============================================================



===============
	require 'mixlib/shellout'
	local_ver = Mixlib::ShellOut.new('rpm -qa --queryformat  "%{VERSION}" storage-agent')
	local_ver.run_command
	Chef::Log.info(" #{local_ver.stdout} ")

service "jakis_cookbook" do
	action [:stop]
	only_if { node['jakis_cookbook']['version'] != "#{local_ver.stdout}"}
	only_if { node.environment() == 'nh-messor-staging' }
end

yum_package 'jakis_cookbook' do
	action [:remove]
	only_if { node['jakis_cookbook']['version'] != "#{local_ver.stdout}"}
	only_if { node.environment() == 'nazwa_env' }11
end
=================


TODO:
przykładowe pliki:
recipe/default.rb
.kitchen.yml
test/integration/default/default_test.rb
spec/unit/recipes/default_spec.rb
