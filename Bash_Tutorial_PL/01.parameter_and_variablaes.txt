=====================================================================================================
Parameter and Variables (Parametry i zmienne)
=====================================================================================================
Positional parameters are arguments present on the command line, and they are referenced by
number.
Special parameters are set by the shell to store information about aspects of its current state,
such as the number of arguments and the exit code of the last command. Their names are
nonalphanumeric characters (for example, *, #, and _).
Variables are identified by a name.

Variables (zmienne)
---------------------------
Nazwy zmiennych mogą zawierać tylko litery, cyfry i znaki podkreślenia i muszą zaczynać się od litery lub podkreślenia.
Zmienne to elementy, które moga przechowywac wartosci. W powloce istnieja zmienne mogace przechowywac wartosci logiczne,
tekst i liczby.
Nie trzeba deklarowac typu zmiennej na samym poczatku skryptu  wystarczy podac dla niej wartosc podczas wpisywania skryptu.
Należy pamiętać, że pomiędzy nazwą zmiennej znakiem równa się i wartością zmiennej nie było spacji lub innych białych znaków.

Pzypisanie zmiennej:
name=VALUE

Wywołanie zmiennej:
echo 	$cyfry 	- zastapi wszystkie biale znaki (spacje, tabulacje, znaki nowej lini itp. ) jedną spacją
echo 	"$cyfry"  - białe znaki są drukowane tak jak zostaly napisane
echo 	'$cyfry"  - nie podstawia wartosci zmiennych, cytuje dokladna tresc.

Polecenie echo  użyte wraz  z  apostrofami  cytuje  dokładną treść, nie podstawia wartości zmiennych, należy o tym pamiętać.
Zmienne to elementy, które moga przechowywac wartosci. W powloce istnieja zmienne mogace przechowywac wartosci logiczne, tekst i liczby.
Nie trzeba deklarowac typu zmiennej na samym poczatku skryptu — wystarczy podac dla niej wartosc podczas wpisywania skryptu.
Jeżeli zmienna zawiera napis z białymi znakami (spacje, tabulacje, znaki nowej linii) to w przypadku użycia polecenia echo bez cudzysłowu każda nadmiarowa ilość białych znaków zostanie zredukowana do pojedynczej spacji.
Jeśli użyjemy cudzysłowu to białe znaki są drukowane tak jak zostały wpisane.

Zasięg zmiennych
--------------------------------------------------------------------------------------------------------
//doczytc

Zmienne ustawione w subshellu nie są widoczne w skrypcie który go wywołał.
Do subshella zaliczają się podmiana komendy $(command); wszystkie elementy pajpa | i kod zamkniety w nawias tj.( komenda )
//powinny byc wyeksprotwane? jak?

globalne - widoczne w każdym podshellu (nazywane również zmiennymi środowiskowymi)
lokalne - widoczne tylko dla tego shella w którym został ustawione (nie są widoczne w podshellach)

Inicjacja zmiennych globalnych (ważne tylko do zamknięcia powłoki)
export nazwa_zmiennej  - nadaje ono wskazanym zmiennym atrybut zmiennych globalnych  (zmienna będzie widoczna w podshellach)
export -n nazwa_zmiennej  - spowoduje usunięcie atrybutu eksportu dla danej zmiennej
export -p - wyświetli liste aktualnie eksportowanych zmiennych (globalnych)
jesli mają być na stałe to należy wpisać je do pliku ~/.bash_profile

Once a variable is exported, it remains in the environment until it is unset.
unset - usuwa zmienną

Variables set in a subshell are not visible to the script that called it. Subshells include command
substitution, as in $(command); all elements of a pipeline; and code enclosed in parentheses, as in ( command ).
Probably the most frequently asked question about shell programming is, “Where did my variables
go? I know I set them, so why are they empty?” More often than not, this is caused by piping the output
of one command into a loop that assigns variables:

Zmienne ustawiona w subshellu nie jest widoczna dla shella. D subshelli zaliczamy m.in.
command substitution, as in $(command); all elements of a pipeline; and code enclosed in parentheses, as in ( command ).


Deklarowanie zmiennych
----------------------------------------------------
http://www.tldp.org/LDP/abs/html/declareref.html

declare/typeset - pozwalą deklarować imodyfikować właściwości zmiennych.
		Zasadniczo jest to samo polecenie, różnicą jest, że declare jest nowsza i preferowana, a typeset będzie działać w ksh.
		Użyte w funkcji ustawiają zmienną jako lokalną, czyli poza funkcją nie będzie dostępna.
		Dobrą praktyką jest ustawianie zmiennej lokalnej w funkcji, zeby przypadkiem nie nadpisać zmiennej o takiej samej nazwie w skrypcie.

		Ustawienie zmiennej na integer -i , znacznie przyspieszy obliczenia i doda kilka dodatkowych operacji arytmetycznych,
		takich jak:	let x**; let y=x**2; let x*=5, etc..

		-l zmienia wszystkie duze litery na małe w wartosci zmiennej
		-u zmienia wszystkie małe litery na duże w wartosci zmiennej
		-r ustawia wartosc zmiennej jako read only, czli nie bedzie mozna przypisac do niej nowej wartosci,
			 jeśli będzoemy chcieli przypisac jakąs wartość to wywali błąd.
	  -a deklaruje zmienną tablicową indeksowaną numerem
		-A deklaruje zmienną tablicową indeksowaną stringiem
		-f A declare -f line with no arguments in a script causes a listing of all the functions previously defined in that script.
			 A declare -f function_name in a script lists just the function named.
		-x This declares a variable as available for exporting outside the environment of the script itself.


Parametry wywolania/skryptu (Posisional parametres)
-----------------------------------------------------
http://wiki.bash-hackers.org/scripting/posparams

Positional parameters are arguments present on the command line, and they are referenced by
number.

Posisional parametres - argumenty wywolania programu:
$1..$9 - nastepne ewentualnie w klamry np. ${10}

Przydatne w funkcjach  1 - pierwszy argument, 2 -drugiargument itd.
wywolanie:  skrypt argument1 argument2 argument3 , np. jakis_skrypt plik1.txt

np.
Sprawdzenie czy sa podany jakis argument
if [ "$1" != "" ]; then
    echo "Positional parameter 1 contains something"
else
    echo "Positional parameter 1 is empty"
fi

Sprawdzenie ile jest podanych argumentow
	if [ $# -gt 0 ]; then
		echo "Your command line contains $# arguments"
	else
		echo "Your command line contains no arguments"
	fi

Aby uzyc parametrow po kolei, sa dwie metody:
		1)
			for param in "$@" ## or just: for param
			do
			: do something with $param
			done

		2)
		while [ $# -gt 0 ] ## or: while [ -n "$*" ]
		do
		: do something with $1
		shift
		done


shift -	usuwa bierzący parametr i przesuwa kolejne o jeden, czyli $2 staje sie $1, $3 staje sie $2 itd.
	np.
	shift 3 	- przesuwa $4 na $1 ()usuwa 3 pierwsze parametry)
	shift "$#" 	- usuwa wszystkie parametry
	shift $(( $# - 2 )) 	- usuwa wszystkie parametry poza dwoma ostatnimi


Zmienne specjalne (Special parameters)
----------------------------------------
*@#0$?_!-

$0 - nazwa biezacego skryptu lub powloki jesli zaden skrypt go nie wykonuje
$@ - zwraca wszystkie wartosci aktualnych parametrów (expanded as "$1" "$2" "$3" ... "$n")
$*   - zwraca wszystkie wartosci aktualnych parametrów
	    (expanded as "$1y$2y$3y...$n", where y is the value of $IFS variable i.e. "$*" is one long string and $IFS act
	    as an separator or token delimiters.
	    W $* sepratarem jest ten ustawiony przez zmienna IFS=)
$# - liczba parametrów
mniej wazne:
$$ - PID procesu biezacej powloki
$_ - is set to the last argument to that command
$? -> exit status of last command that the shell has executed, 0 = exit succesfully, enything else did't executed succesfully
$! - PID ostatnio wywolywanego procesu w tle (wykorzystywane przy wywolywaniu wait)
$- - flagi, z ktorymi zostala wywolana powloka
$PID -> contains the process ID (PID) of the current shell's parent shell process
$ERRNO -> contains the error number returned by the most recent failed system call


Zmienne środowiskowe (ang. environment variable)
--------------------------------------------------------------------------------------------------------
Wbudowane/zarezerwowane zmienne Basha.
np.
$HOME       - ścieżka do twojego katalogu domowego
$USER       - twój login
$HOSTNAME   - nazwa twojego hosta
$OSTYPE     - rodzaj systemu operacyjnego
$UID	    - Unique User ID - unikalny numer użytkownika
$TERM	    - Typ terminala z jakiego korzystamy
Dostępne zmienne srodowiskowe można wyświetlić za pomoca polecenia: printenv
Some reserved variables are read-only, some are set automatically and some lose their meaning when set to a different value than the default.

Inne zmienne wbudowane w basha:
-------------------------------------------------
$RANDOM -  is a bash variable that returns a different integer between 0 and 32,767
- jest ich duzo wiecej, wszystkie ustawione zmienne środowiskowe można wyświetlić polecenniem printenv

linki:
----------------
http://wiki.bash-hackers.org/scripting/posparams
http://linuxcommand.org/wss0130.php
http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html#sect_03_02_03
====================================================================================================

Podstawianie zmiennych (Parameter Expansion)
--------------------------------------------------
http://wiki.bash-hackers.org/syntax/pe <- caly zestaw i pełne info
https://www.cyberciti.biz/tips/bash-shell-parameter-substitution-2.html

-------

Podstawowe uzycie:
$zmienna - wartosc zmiennej
${zmienna}teskt - umieszczenie zmiennej w {} umozliwia wstawianie za nia ciagu znakow bez koniecznosci
		  uzycia spacji/separatora
${#zmienna} - zwraca ilosc znakow wartosci zmiennej

-------

Odwołanie pośrednie (Indirection):
${!zemienna} - jesli zmienna odwoluje sie do drugiej zmiennej to ${!zmienna} zwraca wartosc drugiej zmienej
		(to samo mozna osiagnac przez wbudowana komende "eval" -> eval "sa \$$a")
	 	np.
		jakas_zmienna="barabuch" ;
		zmienna="jakas_zmienna" ;
		echo $zmienna ${!zmienna}
		-> jakas_zmienna barabuch

		${!var}: Indirect Reference
		$ x=yes
		$ a=x
		$ sa "${!a}"
		:yes:

-------

Modyfikacja wielkosci liter:
${zmienna^WZÓR}  - ^ (caret) zmienia na duza litere pierwszy znak wartosci zmienej pasujuący do wzoru.
			Jeśli nie ma podanego WZORu to zmienia pierwszy znak ciągu.
	np.
	$ var=toronto
	$ echo "${var^}"
	:Toronto:
	$ echo "${var^[n-z]}"
	:Toronto:

${zmienna^^WZÓR} - ^^ (double caret) zmienia na duza litere wszystkie znaki zmiennej pasujace do wzoru, jesli nie ma podanego 					wzoru to zmienia wszystkie litery wartosci zmiennej (jesli wzor jest pusty to zmienia wszystkie)
	np.
	$ var=toronto
	$ echo "${var^^[a-m]}" ## matches all characters from a to m inclusive
	:toronto:
	$ echo "${var^^[n-q]}"
	:tOrONtO:
	$ echo "${var^^}"
	:TORONTO:

${zmienna,WZÓR}  - , zmienia na małą litere pierwszy znak wartosci zmienej, jeśli pasuje do wzoru.
${zmienna,,WZÓR} - ,, (double caret) zmienia na małą litere wszystkie znaki zmiennej pasujace do wzoru, jesli nie ma podanego 					wzoru to zmienia wszystkie litery wartosci zmiennej (jesli wzor jest pusty to zmienia wszystkie)
	np.
	$ var=TORONTO
	$ sa "${var,,}"
	:toronto:
	$ sa "${var,,[N-Q]}"
	:ToRonTo:

${zmienna~WZÓR}  - odwraca wielkosc pierwszego znaku wartosci zmiennej
${zmienna~~WZÓR} - odwraca wielkosc wszystkich znaku wartosci zmiennej (jesli wzor jest pusty to odwraca wszystkie)

--------

Variable name expansion
${!WZÓR*}, ${!WZÓR@} - podaje listę zmiennych, których nazwy zaczynają się od wzoru (również zmienny tablicowe)

--------

Usuwanie ciagu znakow ze zmiennej (Substring removal)
${zmienna#wzorzec} - usuwa tekst wartości zmiennej pasujący do wzoru od lewej strony. Usuwa najkrótszy pasujący tekst.
	np.
	$ var=Toronto
	$ sa "${var#*o}"
	:ronto:

	zmienna="Be liberal in what you accept, and conservative in what you send"
	${zmienna#* }	daje => liberal in what you accept, and conservative in what you send

${zmienna##wzorzec} Tak jak #wzorzec, ale usuwa najdłuższy pasujący tekst.
	np.
	$ var=toronto
	$ sa "${var#*o}"
	:o:

	//przydatne w usuwaniu pelnej sciezki do pliku
	$var=/var/log/messages
	sa "${var##*/}"
	:messages:

${zmienna%wzorzec} - usuwa tekst wartości zmiennej pasujący do wzoru od prawej strony. Usuwa najkrótszy pasujący tekst.
	np.
	$ var=Toronto
	$ var=${var%o*}
	$ printf "%s\n" "$var"
	Toront

${zmienna%%wzorzec} - Tak jak %wzorzec, ale usuwa najdłuższy pasujący tekst
	np.
	$ var=Toronto
	$ var=${var%o*}
	$ printf "%s\n" "$var"
	Toront

--------

Znajdz i zamień wartość zmiennej (Search and replace)
${zmienna//WZOR/ZAST} - zastepuje pierwszą pasującą wartosc zmiennej pasujace do WZORu na ZAST
${zmienna//WZOR/ZAST} - zastepuje wszystkie wartosci zmiennej pasujace do WZORu na ZAST
	np.
	$ passwd=zxQ1.=+-a
	$ printf "%s\n" "${passwd//?/*}"
${zmienna/WZOR}	- usuwa pierwszą pasującą wartosc zmiennej pasujace do WZORU
${zmienna//WZOR} - usuwa wszystkie wartosci zmiennej pasujace do WZORU

TIP:
zamiana dla wszystkich wartosci zmiennej tablicowej
	np.
	#zamiana malej litery t na d
	tablica=(This is a text)
	echo "${tablica[@]/t/d}"
	⇒ This is a dext
	echo "${tablica[@]//t/d}"
	⇒ This is a dexd
--------

Zwróć zakres znaków z wartości zmiennej (Substring expansion)
${zmienna:POZYCJA} - zwraca część wartosc zmiennej zaczynajac od POZYCJI (wartosc arytmetyczna) do konca ciagu znaków.
	np.
	$ zmienna="cos tam sros tam"
	$ echo ${zmienna:9}
	-> ros tam
${zmienna:POZYCJA:DŁUGOSC} - zwraca część wartosc zmiennej zaczynajac od POZYCJI o długości podanej w DŁUGOSC
	$ var=Toronto
	$ sa "${var:3:2}"
	:on:
	$ sa "${var:3}"
	:onto:

	$ sa "${var: -3}"
	:nto:

Jeśli podana jest negatywna POZYCJA to początek zwracanej zmiennej liczymy od końca (jesli podajemy negatywna wartosc, musi byc ona oddzielona od ":" spacja lub nawiasem).
	np.
	$ zmienna="cos tam sros tam"
	$ echo ${zmienna:(-2)}
	-> am

Jeśli wartość DŁUGOŚĆ jest ujemna, jest używana jako przesunięcie od końca łańcucha.

--------

Użyj wartości domyslnej
${zmienna:-wartość_domyslna} - jesli zmienna nie jest ustawiona lub jest pusta to wyrazenie zwraca "wartość_domyslną",
			       jeśli jest ustawiona, to zwraca wartość tej zmiennej
			       np.
			       $ zmienna=
			       $ echo "${zmienna:-jakis_ciag_znakow}"
			       jakis_ciag_znakow
${zmienna-wartość_domyslna} - sprawdza czy zmienna jest ustawiona, jesli nie to zwarca "wartosc",
			       jeśli jest to nic nie zwraca
			       $ var=
			       $ sa "${var-default}" ## zmienna var jest ustawona, wiec polecenie nic nie zwraca
			       ::
			       $ unset var
			       $ sa "${var-default}" ## zmienna var nie jest ustawiona, wiec zwraca wartosc domyslna
		               :default:
--------

Przypisz domyślną wartość
To samo co ${zmienna:-wartość_domyslna} i ${zmienna-wartość_domyslna} z tą różnica, że przypisuje wartość do zmiennej.
${zmienna:=nowa_wartosc} - jesli zmienna nie jest ustawiona lub jest pusta to zmienna jest ustawiona na ciagn znakow "nowa_wartosc",
		      jesli jest ustawiona to zwraca wartosc zmiennej;
${zmienna=nowa_wartosc} - jesli zmienna nie jest ustawiona to jest ustawiona na ciagn znakow "nowa_wartosc",
		     jesli jest ustawiona to zwraca wartosc zmiennej;

--------

Przypisz wartość alternatywną
${zmienna:+wartosc_aternatywna} - jesli zmienna nie jest ustawiona lub jest 0 to wyrazenie nic nie zwraca.
				  Jesli jest ustawiona to wyrazenie zwraca ciagn znakow "wartosc_alternatywna";
				  	np.
				  	${name:+Name already exists}
${zmienna+wartosc_aternatywna} - jeśli zmienna jest ustawiona lub jest pusta to zmienna zwróci "wartość_alternatywna".
				 Jeśli nie jest ustawiona wyrażenie nic nie zwróci.
				 	np.
				 	#przydatne np. czy zmienna jest ustawiona
				 	if [[ ${foo+isset} = isset ]]; then
 				 		echo "foo is set..."
					else
  						echo "foo is not set..."
				 	fi

--------

Wyświetl błąd jeśli zmienna nie jest ustawiona lub jest pusta
${zmienna:?tekst} - jesli zmienna nie jest ustawiona lub jest 0 to wyrazenie zwraca ciagn znakow "tekst",jesli jest ustawiona to
	  	    zwraca zmienna i zamyka sesje shella;
${zmienna:?} - jesli jest ustawiona to zwraca zmienna, jesli nie jest to zwraca standardowy komunikat bledu (null or not set)

--------

Przydatne skrypty:

read passwd
if [ ${#passwd} -lt 8 ]
then
printf "Password is too short: %d characters\n" "$#" >&2
exit 1
fi
====================================================================================================
